
rom.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <RESET_ADDR-0x20>:
   0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <RESET_ADDR>
   4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <UNDEF_INST_ADDR>
   8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <SOFT_INTER_ADDR>
   c:	e59ff018 	ldr	pc, [pc, #24]	; 2c <INST_MEM_FAULT_ADDR>
  10:	e59ff018 	ldr	pc, [pc, #24]	; 30 <DATA_MEM_FAULT_ADDR>
  14:	b8a06f58 	.word	0xb8a06f58
  18:	e59ff018 	ldr	pc, [pc, #24]	; 38 <IRQ_ADDR>
  1c:	e59ff018 	ldr	pc, [pc, #24]	; 3c <FIQ_ADDR>

00000020 <RESET_ADDR>:
  20:	00000040 	.word	0x00000040

00000024 <UNDEF_INST_ADDR>:
  24:	40001004 	.word	0x40001004

00000028 <SOFT_INTER_ADDR>:
  28:	1008      	.short	0x1008
  2a:	4000      	.short	0x4000

0000002c <INST_MEM_FAULT_ADDR>:
  2c:	4000100c 	.word	0x4000100c

00000030 <DATA_MEM_FAULT_ADDR>:
  30:	40001010 	.word	0x40001010
  34:	00000000 	.word	0x00000000

00000038 <IRQ_ADDR>:
  38:	40001014 	.word	0x40001014

0000003c <FIQ_ADDR>:
  3c:	40001018 	.word	0x40001018

00000040 <_start>:
  40:	e59f0058 	ldr	r0, [pc, #88]	; a0 <end_set_loop+0x18>
  44:	e321f0df 	msr	CPSR_c, #223	; 0xdf
  48:	e1a0d000 	mov	sp, r0
  4c:	e59f1050 	ldr	r1, [pc, #80]	; a4 <end_set_loop+0x1c>
  50:	e59f2050 	ldr	r2, [pc, #80]	; a8 <end_set_loop+0x20>
  54:	e3a03000 	mov	r3, #0	; 0x0

00000058 <bss_clear_loop>:
  58:	e1510002 	cmp	r1, r2
  5c:	14813004 	strne	r3, [r1], #4
  60:	1afffffc 	bne	58 <bss_clear_loop>
  64:	e59f1040 	ldr	r1, [pc, #64]	; ac <end_set_loop+0x24>
  68:	e59f2040 	ldr	r2, [pc, #64]	; b0 <end_set_loop+0x28>
  6c:	e59f3040 	ldr	r3, [pc, #64]	; b4 <end_set_loop+0x2c>
  70:	e1510002 	cmp	r1, r2
  74:	0a000003 	beq	88 <end_set_loop>

00000078 <set_loop>:
  78:	e1510003 	cmp	r1, r3
  7c:	e4924004 	ldr	r4, [r2], #4
  80:	e4814004 	str	r4, [r1], #4
  84:	1afffffb 	bne	78 <set_loop>

00000088 <end_set_loop>:
  88:	e59fa028 	ldr	sl, [pc, #40]	; b8 <end_set_loop+0x30>
  8c:	e1a0e00f 	mov	lr, pc
  90:	e12fff1a 	bx	sl
  94:	e59fa020 	ldr	sl, [pc, #32]	; bc <end_set_loop+0x34>
  98:	e1a0e00f 	mov	lr, pc
  9c:	e12fff1a 	bx	sl
  a0:	40001004 	.word	0x40001004
  a4:	40000000 	.word	0x40000000
  a8:	40000004 	.word	0x40000004
  ac:	40000000 	.word	0x40000000
  b0:	00000ac4 	.word	0x00000ac4
  b4:	40000000 	.word	0x40000000
  b8:	000000c0 	.word	0x000000c0
  bc:	00000a64 	.word	0x00000a64

000000c0 <StartOsc>:
#include  "startosc.h"
void StartOsc(void) {
  c0:	e1a0c00d 	mov	ip, sp
  c4:	e92dd800 	push	{fp, ip, lr, pc}
  c8:	e24cb004 	sub	fp, ip, #4	; 0x4
  
    pPLL->CONFIGURATION =__PLL_P_VALUE__ | __PLL_M_VALUE__;
  cc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
  d0:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
  d4:	e2833080 	add	r3, r3, #128	; 0x80
  d8:	e3a02023 	mov	r2, #35	; 0x23
  dc:	e5c32004 	strb	r2, [r3, #4]
    PLL_FEED();
  e0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
  e4:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
  e8:	e2833080 	add	r3, r3, #128	; 0x80
  ec:	e3e02055 	mvn	r2, #85	; 0x55
  f0:	e5c3200c 	strb	r2, [r3, #12]
  f4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
  f8:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
  fc:	e2833080 	add	r3, r3, #128	; 0x80
 100:	e3a02055 	mov	r2, #85	; 0x55
 104:	e5c3200c 	strb	r2, [r3, #12]
    
    pPLL->CONTROL = __PLL_CONTROL_ON_DISCONNECTED__;
 108:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 10c:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
 110:	e2833080 	add	r3, r3, #128	; 0x80
 114:	e3a02001 	mov	r2, #1	; 0x1
 118:	e5c32000 	strb	r2, [r3]
    PLL_FEED();
 11c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 120:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
 124:	e2833080 	add	r3, r3, #128	; 0x80
 128:	e3e02055 	mvn	r2, #85	; 0x55
 12c:	e5c3200c 	strb	r2, [r3, #12]
 130:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 134:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
 138:	e2833080 	add	r3, r3, #128	; 0x80
 13c:	e3a02055 	mov	r2, #85	; 0x55
 140:	e5c3200c 	strb	r2, [r3, #12]

    while (!(pPLL->STATUS & __PLLSTAT_PLOCK_MASK__));
 144:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 148:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
 14c:	e2833080 	add	r3, r3, #128	; 0x80
 150:	e1d330b8 	ldrh	r3, [r3, #8]
 154:	e2033b01 	and	r3, r3, #1024	; 0x400
 158:	e3530000 	cmp	r3, #0	; 0x0
 15c:	0afffff8 	beq	144 <StartOsc+0x84>

    pPLL->CONTROL = __PLL_CONTROL_OFF_CONNECTED__;
 160:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 164:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
 168:	e2833080 	add	r3, r3, #128	; 0x80
 16c:	e3a02003 	mov	r2, #3	; 0x3
 170:	e5c32000 	strb	r2, [r3]
    
    PLL_FEED();
 174:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 178:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
 17c:	e2833080 	add	r3, r3, #128	; 0x80
 180:	e3e02055 	mvn	r2, #85	; 0x55
 184:	e5c3200c 	strb	r2, [r3, #12]
 188:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 18c:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
 190:	e2833080 	add	r3, r3, #128	; 0x80
 194:	e3a02055 	mov	r2, #85	; 0x55
 198:	e5c3200c 	strb	r2, [r3, #12]
     
    pMAM->CONTROL_REGISTER = __MAM_FULLY_ENABLE__;
 19c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 1a0:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
 1a4:	e3a02002 	mov	r2, #2	; 0x2
 1a8:	e5832000 	str	r2, [r3]
     
    pMAM->TIMING = __MAMTIM_FETCH_3_CLOCK__; //according to Table 35: Suggestions for MAM timing selection 
 1ac:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 1b0:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
 1b4:	e3a02003 	mov	r2, #3	; 0x3
 1b8:	e5832004 	str	r2, [r3, #4]
    
    pAPBDIV->APBDIV = __APBDIV_CLOCK_EQUAL_CLOCK__;
 1bc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 1c0:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
 1c4:	e2833c01 	add	r3, r3, #256	; 0x100
 1c8:	e3a02001 	mov	r2, #1	; 0x1
 1cc:	e5832000 	str	r2, [r3]
}
 1d0:	e24bd00c 	sub	sp, fp, #12	; 0xc
 1d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 1d8:	e12fff1e 	bx	lr

000001dc <timer_init>:
 * 14745600 
 * 29491200
 * 44236800
 * 58982400     <--- Clock choosed (PCLCK = CCLKC)
* */
void timer_init(pLPC_TIMER timer, U32 countNbr){
 1dc:	e1a0c00d 	mov	ip, sp
 1e0:	e92dd800 	push	{fp, ip, lr, pc}
 1e4:	e24cb004 	sub	fp, ip, #4	; 0x4
 1e8:	e24dd008 	sub	sp, sp, #8	; 0x8
 1ec:	e50b0010 	str	r0, [fp, #-16]
 1f0:	e50b1014 	str	r1, [fp, #-20]
  timer->TCR    = __TCR_DISABLE__|__TCR_RESET_ENABLE__;
 1f4:	e51b2010 	ldr	r2, [fp, #-16]
 1f8:	e3a03002 	mov	r3, #2	; 0x2
 1fc:	e5823004 	str	r3, [r2, #4]
  timer->CTCR   = __CTCR_MODE_0__;
 200:	e51b2010 	ldr	r2, [fp, #-16]
 204:	e3a03000 	mov	r3, #0	; 0x0
 208:	e5823070 	str	r3, [r2, #112]
  timer->PR     = countNbr;
 20c:	e51b2014 	ldr	r2, [fp, #-20]
 210:	e51b3010 	ldr	r3, [fp, #-16]
 214:	e583200c 	str	r2, [r3, #12]
  timer->TCR    = __TCR_ENABLE__|__TCR_RESET_DISABLE__; 
 218:	e51b2010 	ldr	r2, [fp, #-16]
 21c:	e3a03003 	mov	r3, #3	; 0x3
 220:	e5823004 	str	r3, [r2, #4]
}
 224:	e24bd00c 	sub	sp, fp, #12	; 0xc
 228:	e89d6800 	ldm	sp, {fp, sp, lr}
 22c:	e12fff1e 	bx	lr

00000230 <timer_delay>:

void timer_delay(pLPC_TIMER timer, U32 elapse){
 230:	e1a0c00d 	mov	ip, sp
 234:	e92dd800 	push	{fp, ip, lr, pc}
 238:	e24cb004 	sub	fp, ip, #4	; 0x4
 23c:	e24dd010 	sub	sp, sp, #16	; 0x10
 240:	e50b0018 	str	r0, [fp, #-24]
 244:	e50b101c 	str	r1, [fp, #-28]
    int time;
    timer->PC = 0;
 248:	e51b2018 	ldr	r2, [fp, #-24]
 24c:	e3a03000 	mov	r3, #0	; 0x0
 250:	e5823010 	str	r3, [r2, #16]
    time = timer_elapsed(timer,0);
 254:	e51b3018 	ldr	r3, [fp, #-24]
 258:	e5933008 	ldr	r3, [r3, #8]
 25c:	e50b3010 	str	r3, [fp, #-16]
    while(timer_elapsed(timer,time)< elapse);  
 260:	e51b3018 	ldr	r3, [fp, #-24]
 264:	e5932008 	ldr	r2, [r3, #8]
 268:	e51b3010 	ldr	r3, [fp, #-16]
 26c:	e0632002 	rsb	r2, r3, r2
 270:	e51b301c 	ldr	r3, [fp, #-28]
 274:	e1520003 	cmp	r2, r3
 278:	3afffff8 	bcc	260 <timer_delay+0x30>
}
 27c:	e24bd00c 	sub	sp, fp, #12	; 0xc
 280:	e89d6800 	ldm	sp, {fp, sp, lr}
 284:	e12fff1e 	bx	lr

00000288 <gpio_PINSEL0>:
 * 10 Second alternate function 
 * 11 Third alternate function 
 * */

/*The PINSEL0 register controls the functions of the pins 0-15*/
static void gpio_PINSEL0(U32 mask){ 
 288:	e1a0c00d 	mov	ip, sp
 28c:	e92dd800 	push	{fp, ip, lr, pc}
 290:	e24cb004 	sub	fp, ip, #4	; 0x4
 294:	e24dd008 	sub	sp, sp, #8	; 0x8
 298:	e50b0010 	str	r0, [fp, #-16]
 __PINSEL0__ |= mask; 
 29c:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
 2a0:	e282290b 	add	r2, r2, #180224	; 0x2c000
 2a4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 2a8:	e283390b 	add	r3, r3, #180224	; 0x2c000
 2ac:	e5931000 	ldr	r1, [r3]
 2b0:	e51b3010 	ldr	r3, [fp, #-16]
 2b4:	e1813003 	orr	r3, r1, r3
 2b8:	e5823000 	str	r3, [r2]
}
 2bc:	e24bd00c 	sub	sp, fp, #12	; 0xc
 2c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 2c4:	e12fff1e 	bx	lr

000002c8 <gpio_PINSEL1>:

/*The PINSEL1 register controls the functions of the pins 16-31*/
static void gpio_PINSEL1(U32 mask){   
 2c8:	e1a0c00d 	mov	ip, sp
 2cc:	e92dd800 	push	{fp, ip, lr, pc}
 2d0:	e24cb004 	sub	fp, ip, #4	; 0x4
 2d4:	e24dd008 	sub	sp, sp, #8	; 0x8
 2d8:	e50b0010 	str	r0, [fp, #-16]
  __PINSEL1__ |= mask;
 2dc:	e3a0224e 	mov	r2, #-536870908	; 0xe0000004
 2e0:	e282290b 	add	r2, r2, #180224	; 0x2c000
 2e4:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
 2e8:	e283390b 	add	r3, r3, #180224	; 0x2c000
 2ec:	e5931000 	ldr	r1, [r3]
 2f0:	e51b3010 	ldr	r3, [fp, #-16]
 2f4:	e1813003 	orr	r3, r1, r3
 2f8:	e5823000 	str	r3, [r2]
}
 2fc:	e24bd00c 	sub	sp, fp, #12	; 0xc
 300:	e89d6800 	ldm	sp, {fp, sp, lr}
 304:	e12fff1e 	bx	lr

00000308 <gpio_init>:

void gpio_init(U32 pinsel0_mask,U32 pinsel1_mask){
 308:	e1a0c00d 	mov	ip, sp
 30c:	e92dd800 	push	{fp, ip, lr, pc}
 310:	e24cb004 	sub	fp, ip, #4	; 0x4
 314:	e24dd008 	sub	sp, sp, #8	; 0x8
 318:	e50b0010 	str	r0, [fp, #-16]
 31c:	e50b1014 	str	r1, [fp, #-20]
  gpio_PINSEL0(pinsel0_mask);
 320:	e51b3010 	ldr	r3, [fp, #-16]
 324:	e1a00003 	mov	r0, r3
 328:	ebffffd6 	bl	288 <gpio_PINSEL0>
  gpio_PINSEL1(pinsel1_mask);
 32c:	e51b3014 	ldr	r3, [fp, #-20]
 330:	e1a00003 	mov	r0, r3
 334:	ebffffe3 	bl	2c8 <gpio_PINSEL1>
} 
 338:	e24bd00c 	sub	sp, fp, #12	; 0xc
 33c:	e89d6800 	ldm	sp, {fp, sp, lr}
 340:	e12fff1e 	bx	lr

00000344 <gpio_write>:
 *Table 62. (Page 72)
 * GPIO port 0 Direction register (IO0DIR - address 0xE002 8008) bit description
 * 0 Controlled pin is input.
 * 1 Controlled pin is output.
 * */
void gpio_write(U32 mask, U32 value ){
 344:	e1a0c00d 	mov	ip, sp
 348:	e92dd800 	push	{fp, ip, lr, pc}
 34c:	e24cb004 	sub	fp, ip, #4	; 0x4
 350:	e24dd008 	sub	sp, sp, #8	; 0x8
 354:	e50b0010 	str	r0, [fp, #-16]
 358:	e50b1014 	str	r1, [fp, #-20]
  pGPIO->IOSET = mask & value;  
 35c:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
 360:	e282290a 	add	r2, r2, #163840	; 0x28000
 364:	e51b1010 	ldr	r1, [fp, #-16]
 368:	e51b3014 	ldr	r3, [fp, #-20]
 36c:	e0013003 	and	r3, r1, r3
 370:	e5823004 	str	r3, [r2, #4]
  pGPIO->IOCLR = ~(mask & value);
 374:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
 378:	e282290a 	add	r2, r2, #163840	; 0x28000
 37c:	e51b1010 	ldr	r1, [fp, #-16]
 380:	e51b3014 	ldr	r3, [fp, #-20]
 384:	e0013003 	and	r3, r1, r3
 388:	e1e03003 	mvn	r3, r3
 38c:	e582300c 	str	r3, [r2, #12]
}
 390:	e24bd00c 	sub	sp, fp, #12	; 0xc
 394:	e89d6800 	ldm	sp, {fp, sp, lr}
 398:	e12fff1e 	bx	lr

0000039c <gpio_set_direction>:

void gpio_set_direction(U32 mask, unsigned char direction){
 39c:	e1a0c00d 	mov	ip, sp
 3a0:	e92dd800 	push	{fp, ip, lr, pc}
 3a4:	e24cb004 	sub	fp, ip, #4	; 0x4
 3a8:	e24dd018 	sub	sp, sp, #24	; 0x18
 3ac:	e50b0010 	str	r0, [fp, #-16]
 3b0:	e1a03001 	mov	r3, r1
 3b4:	e54b3011 	strb	r3, [fp, #-17]
  pGPIO->IODIR &= (direction)?mask:~mask;
 3b8:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
 3bc:	e50b1020 	str	r1, [fp, #-32]
 3c0:	e51b2020 	ldr	r2, [fp, #-32]
 3c4:	e282290a 	add	r2, r2, #163840	; 0x28000
 3c8:	e50b2020 	str	r2, [fp, #-32]
 3cc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 3d0:	e283390a 	add	r3, r3, #163840	; 0x28000
 3d4:	e5933008 	ldr	r3, [r3, #8]
 3d8:	e50b301c 	str	r3, [fp, #-28]
 3dc:	e55b3011 	ldrb	r3, [fp, #-17]
 3e0:	e3530000 	cmp	r3, #0	; 0x0
 3e4:	1a000003 	bne	3f8 <gpio_set_direction+0x5c>
 3e8:	e51b3010 	ldr	r3, [fp, #-16]
 3ec:	e1e03003 	mvn	r3, r3
 3f0:	e50b3018 	str	r3, [fp, #-24]
 3f4:	ea000001 	b	400 <gpio_set_direction+0x64>
 3f8:	e51b3010 	ldr	r3, [fp, #-16]
 3fc:	e50b3018 	str	r3, [fp, #-24]
 400:	e51b101c 	ldr	r1, [fp, #-28]
 404:	e51b2018 	ldr	r2, [fp, #-24]
 408:	e0013002 	and	r3, r1, r2
 40c:	e51b1020 	ldr	r1, [fp, #-32]
 410:	e5813008 	str	r3, [r1, #8]
}
 414:	e24bd00c 	sub	sp, fp, #12	; 0xc
 418:	e89d6800 	ldm	sp, {fp, sp, lr}
 41c:	e12fff1e 	bx	lr

00000420 <gpio_clear>:

void gpio_clear(U32 mask){
 420:	e1a0c00d 	mov	ip, sp
 424:	e92dd800 	push	{fp, ip, lr, pc}
 428:	e24cb004 	sub	fp, ip, #4	; 0x4
 42c:	e24dd008 	sub	sp, sp, #8	; 0x8
 430:	e50b0010 	str	r0, [fp, #-16]
  pGPIO->IOCLR = mask; 
 434:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 438:	e283390a 	add	r3, r3, #163840	; 0x28000
 43c:	e51b2010 	ldr	r2, [fp, #-16]
 440:	e583200c 	str	r2, [r3, #12]
}
 444:	e24bd00c 	sub	sp, fp, #12	; 0xc
 448:	e89d6800 	ldm	sp, {fp, sp, lr}
 44c:	e12fff1e 	bx	lr

00000450 <gpio_read>:

U32 gpio_read(U32 mask){
 450:	e1a0c00d 	mov	ip, sp
 454:	e92dd800 	push	{fp, ip, lr, pc}
 458:	e24cb004 	sub	fp, ip, #4	; 0x4
 45c:	e24dd008 	sub	sp, sp, #8	; 0x8
 460:	e50b0010 	str	r0, [fp, #-16]
    return  pGPIO->IOPIN& mask;
 464:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
 468:	e283390a 	add	r3, r3, #163840	; 0x28000
 46c:	e5932000 	ldr	r2, [r3]
 470:	e51b3010 	ldr	r3, [fp, #-16]
 474:	e0023003 	and	r3, r2, r3
}
 478:	e1a00003 	mov	r0, r3
 47c:	e24bd00c 	sub	sp, fp, #12	; 0xc
 480:	e89d6800 	ldm	sp, {fp, sp, lr}
 484:	e12fff1e 	bx	lr

00000488 <Wstrlen>:
#define LCD_GPIO                 0x7F0    


U8 value = 0;
U8 isCentered = 0;
inline U32 Wstrlen(const Pbyte str){
 488:	e1a0c00d 	mov	ip, sp
 48c:	e92dd800 	push	{fp, ip, lr, pc}
 490:	e24cb004 	sub	fp, ip, #4	; 0x4
 494:	e24dd008 	sub	sp, sp, #8	; 0x8
 498:	e50b0010 	str	r0, [fp, #-16]
  register Pbyte p;

	for (p=str ; *p ; p++);
 49c:	e51b2010 	ldr	r2, [fp, #-16]
 4a0:	e50b2014 	str	r2, [fp, #-20]
 4a4:	ea000002 	b	4b4 <Wstrlen+0x2c>
 4a8:	e51b3014 	ldr	r3, [fp, #-20]
 4ac:	e2833001 	add	r3, r3, #1	; 0x1
 4b0:	e50b3014 	str	r3, [fp, #-20]
 4b4:	e51b2014 	ldr	r2, [fp, #-20]
 4b8:	e5d23000 	ldrb	r3, [r2]
 4bc:	e20330ff 	and	r3, r3, #255	; 0xff
 4c0:	e3530000 	cmp	r3, #0	; 0x0
 4c4:	1afffff7 	bne	4a8 <Wstrlen+0x20>

	return p - str;
 4c8:	e51b2014 	ldr	r2, [fp, #-20]
 4cc:	e51b3010 	ldr	r3, [fp, #-16]
 4d0:	e0633002 	rsb	r3, r3, r2
}
 4d4:	e1a00003 	mov	r0, r3
 4d8:	e24bd00c 	sub	sp, fp, #12	; 0xc
 4dc:	e89d6800 	ldm	sp, {fp, sp, lr}
 4e0:	e12fff1e 	bx	lr

000004e4 <processValue>:
static void processValue(U8 rs, U8 value){
 4e4:	e1a0c00d 	mov	ip, sp
 4e8:	e92dd800 	push	{fp, ip, lr, pc}
 4ec:	e24cb004 	sub	fp, ip, #4	; 0x4
 4f0:	e24dd008 	sub	sp, sp, #8	; 0x8
 4f4:	e1a03000 	mov	r3, r0
 4f8:	e1a02001 	mov	r2, r1
 4fc:	e54b300d 	strb	r3, [fp, #-13]
 500:	e1a03002 	mov	r3, r2
 504:	e54b300e 	strb	r3, [fp, #-14]
  LCD_write(rs | ((value >> DATA_BITS_SHIFT)&CLEAN_MASK));
 508:	e55b300e 	ldrb	r3, [fp, #-14]
 50c:	e1a03223 	lsr	r3, r3, #4
 510:	e20320ff 	and	r2, r3, #255	; 0xff
 514:	e55b300d 	ldrb	r3, [fp, #-13]
 518:	e1823003 	orr	r3, r2, r3
 51c:	e20330ff 	and	r3, r3, #255	; 0xff
 520:	e1a00003 	mov	r0, r3
 524:	eb000046 	bl	644 <LCD_write>
  LCD_write(rs | (value  & CLEAN_MASK));
 528:	e55b300e 	ldrb	r3, [fp, #-14]
 52c:	e20330ff 	and	r3, r3, #255	; 0xff
 530:	e203300f 	and	r3, r3, #15	; 0xf
 534:	e55b200d 	ldrb	r2, [fp, #-13]
 538:	e1a01003 	mov	r1, r3
 53c:	e1a03002 	mov	r3, r2
 540:	e1813003 	orr	r3, r1, r3
 544:	e20330ff 	and	r3, r3, #255	; 0xff
 548:	e20330ff 	and	r3, r3, #255	; 0xff
 54c:	e1a00003 	mov	r0, r3
 550:	eb00003b 	bl	644 <LCD_write>
}
 554:	e24bd00c 	sub	sp, fp, #12	; 0xc
 558:	e89d6800 	ldm	sp, {fp, sp, lr}
 55c:	e12fff1e 	bx	lr

00000560 <LCD_init>:
void LCD_init(pLPC_TIMER timer){
 560:	e1a0c00d 	mov	ip, sp
 564:	e92dd800 	push	{fp, ip, lr, pc}
 568:	e24cb004 	sub	fp, ip, #4	; 0x4
 56c:	e24dd008 	sub	sp, sp, #8	; 0x8
 570:	e50b0010 	str	r0, [fp, #-16]
    //Pag51: Table 6. Interface Data Length : Four bits
    /* Begin inicialization */
    
    processValue(0,(ENABLE_MASK|RS_MASK|DATA_MASK));
 574:	e3a00000 	mov	r0, #0	; 0x0
 578:	e3a010f0 	mov	r1, #240	; 0xf0
 57c:	ebffffd8 	bl	4e4 <processValue>
    timer_sleep_miliseconds(timer,46);          //Wait for 45 ms or more after VDD
 580:	e51b0010 	ldr	r0, [fp, #-16]
 584:	e3a0181f 	mov	r1, #2031616	; 0x1f0000
 588:	e2811eca 	add	r1, r1, #3232	; 0xca0
 58c:	e2811008 	add	r1, r1, #8	; 0x8
 590:	ebffff26 	bl	230 <timer_delay>
    processValue(0,0x03);    
 594:	e3a00000 	mov	r0, #0	; 0x0
 598:	e3a01003 	mov	r1, #3	; 0x3
 59c:	ebffffd0 	bl	4e4 <processValue>
    timer_sleep_miliseconds(timer,5);           //Wait for 4,1 ms or more
 5a0:	e51b0010 	ldr	r0, [fp, #-16]
 5a4:	e3a01a36 	mov	r1, #221184	; 0x36000
 5a8:	e2411004 	sub	r1, r1, #4	; 0x4
 5ac:	ebffff1f 	bl	230 <timer_delay>
    processValue(0,0x03);    
 5b0:	e3a00000 	mov	r0, #0	; 0x0
 5b4:	e3a01003 	mov	r1, #3	; 0x3
 5b8:	ebffffc9 	bl	4e4 <processValue>
    timer_sleep_microseconds(timer,110);           //Wait for 100 μs or more
 5bc:	e51b0010 	ldr	r0, [fp, #-16]
 5c0:	e3a01d4b 	mov	r1, #4800	; 0x12c0
 5c4:	e2811028 	add	r1, r1, #40	; 0x28
 5c8:	ebffff18 	bl	230 <timer_delay>
    processValue(0,0x03);    
 5cc:	e3a00000 	mov	r0, #0	; 0x0
 5d0:	e3a01003 	mov	r1, #3	; 0x3
 5d4:	ebffffc2 	bl	4e4 <processValue>

    processValue(0,0x02);    //Functon set (interface data length : 4 bits)
 5d8:	e3a00000 	mov	r0, #0	; 0x0
 5dc:	e3a01002 	mov	r1, #2	; 0x2
 5e0:	ebffffbf 	bl	4e4 <processValue>
    processValue(0,0x28);    //Function Set (0x28) -> Set Duty
 5e4:	e3a00000 	mov	r0, #0	; 0x0
 5e8:	e3a01028 	mov	r1, #40	; 0x28
 5ec:	ebffffbc 	bl	4e4 <processValue>
    processValue(0,0x08);    //Display OFF (0x08)
 5f0:	e3a00000 	mov	r0, #0	; 0x0
 5f4:	e3a01008 	mov	r1, #8	; 0x8
 5f8:	ebffffb9 	bl	4e4 <processValue>
    processValue(0,0x01);    //Display Clear (0x01)
 5fc:	e3a00000 	mov	r0, #0	; 0x0
 600:	e3a01001 	mov	r1, #1	; 0x1
 604:	ebffffb6 	bl	4e4 <processValue>
    processValue(0,0x07);    //Entry Mode Set (0x07) -> Set Increment, Display shift
 608:	e3a00000 	mov	r0, #0	; 0x0
 60c:	e3a01007 	mov	r1, #7	; 0x7
 610:	ebffffb3 	bl	4e4 <processValue>
    
    /* Entry Mode Set */
    processValue(0,ENTRY_SET_MASK);      //Entry Mode 
 614:	e3a00000 	mov	r0, #0	; 0x0
 618:	e3a01006 	mov	r1, #6	; 0x6
 61c:	ebffffb0 	bl	4e4 <processValue>
    
    /* Activate the Display */
    processValue(0,DISPLAY_ON_MASK);    //Display  
 620:	e3a00000 	mov	r0, #0	; 0x0
 624:	e3a0100c 	mov	r1, #12	; 0xc
 628:	ebffffad 	bl	4e4 <processValue>
    processValue(0,CURSOR_ON_MASK);    //Cursor
 62c:	e3a00000 	mov	r0, #0	; 0x0
 630:	e3a0100a 	mov	r1, #10	; 0xa
 634:	ebffffaa 	bl	4e4 <processValue>
}
 638:	e24bd00c 	sub	sp, fp, #12	; 0xc
 63c:	e89d6800 	ldm	sp, {fp, sp, lr}
 640:	e12fff1e 	bx	lr

00000644 <LCD_write>:


void LCD_write(U8  byte){
 644:	e1a0c00d 	mov	ip, sp
 648:	e92dd800 	push	{fp, ip, lr, pc}
 64c:	e24cb004 	sub	fp, ip, #4	; 0x4
 650:	e24dd008 	sub	sp, sp, #8	; 0x8
 654:	e1a03000 	mov	r3, r0
 658:	e54b300d 	strb	r3, [fp, #-13]
  gpio_write(LCD_GPIO,(byte<<LCD_GPIO_SHIFT)&&LCD_GPIO);
 65c:	e55b300d 	ldrb	r3, [fp, #-13]
 660:	e1a03403 	lsl	r3, r3, #8
 664:	e3530000 	cmp	r3, #0	; 0x0
 668:	03a03000 	moveq	r3, #0	; 0x0
 66c:	13a03001 	movne	r3, #1	; 0x1
 670:	e3a00e7f 	mov	r0, #2032	; 0x7f0
 674:	e1a01003 	mov	r1, r3
 678:	ebffff31 	bl	344 <gpio_write>
}
 67c:	e24bd00c 	sub	sp, fp, #12	; 0xc
 680:	e89d6800 	ldm	sp, {fp, sp, lr}
 684:	e12fff1e 	bx	lr

00000688 <entryModeSet>:


/**
 * Activa o modo de entrada de dados
 */
void entryModeSet() {processValue(0,ENTRY_SET_MASK);}
 688:	e1a0c00d 	mov	ip, sp
 68c:	e92dd800 	push	{fp, ip, lr, pc}
 690:	e24cb004 	sub	fp, ip, #4	; 0x4
 694:	e3a00000 	mov	r0, #0	; 0x0
 698:	e3a01006 	mov	r1, #6	; 0x6
 69c:	ebffff90 	bl	4e4 <processValue>
 6a0:	e24bd00c 	sub	sp, fp, #12	; 0xc
 6a4:	e89d6800 	ldm	sp, {fp, sp, lr}
 6a8:	e12fff1e 	bx	lr

000006ac <displayControlOn>:
  
/**
 * Activa o mostrador
 */
void displayControlOn() {processValue(0,DISPLAY_ON_MASK | CURSOR_ON_MASK);}
 6ac:	e1a0c00d 	mov	ip, sp
 6b0:	e92dd800 	push	{fp, ip, lr, pc}
 6b4:	e24cb004 	sub	fp, ip, #4	; 0x4
 6b8:	e3a00000 	mov	r0, #0	; 0x0
 6bc:	e3a0100e 	mov	r1, #14	; 0xe
 6c0:	ebffff87 	bl	4e4 <processValue>
 6c4:	e24bd00c 	sub	sp, fp, #12	; 0xc
 6c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 6cc:	e12fff1e 	bx	lr

000006d0 <displayControlOff>:
/**
 * Desactiva o mostrador
 */
void displayControlOff() {processValue(0,DISPLAY_OFF_MASK);}
 6d0:	e1a0c00d 	mov	ip, sp
 6d4:	e92dd800 	push	{fp, ip, lr, pc}
 6d8:	e24cb004 	sub	fp, ip, #4	; 0x4
 6dc:	e3a00000 	mov	r0, #0	; 0x0
 6e0:	e3a01008 	mov	r1, #8	; 0x8
 6e4:	ebffff7e 	bl	4e4 <processValue>
 6e8:	e24bd00c 	sub	sp, fp, #12	; 0xc
 6ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 6f0:	e12fff1e 	bx	lr

000006f4 <blinkOff>:
/**
 * Desactiva o Blink
 */
void blinkOff() {processValue(0,DISPLAY_ON_MASK | BLINK_OFF_MASK);}
 6f4:	e1a0c00d 	mov	ip, sp
 6f8:	e92dd800 	push	{fp, ip, lr, pc}
 6fc:	e24cb004 	sub	fp, ip, #4	; 0x4
 700:	e3a00000 	mov	r0, #0	; 0x0
 704:	e3a0100c 	mov	r1, #12	; 0xc
 708:	ebffff75 	bl	4e4 <processValue>
 70c:	e24bd00c 	sub	sp, fp, #12	; 0xc
 710:	e89d6800 	ldm	sp, {fp, sp, lr}
 714:	e12fff1e 	bx	lr

00000718 <clear>:

/**
 * Apaga todos os caracteres do display
 * */
void clear() {processValue(0,CLEAR_MASK);}
 718:	e1a0c00d 	mov	ip, sp
 71c:	e92dd800 	push	{fp, ip, lr, pc}
 720:	e24cb004 	sub	fp, ip, #4	; 0x4
 724:	e3a00000 	mov	r0, #0	; 0x0
 728:	e3a01001 	mov	r1, #1	; 0x1
 72c:	ebffff6c 	bl	4e4 <processValue>
 730:	e24bd00c 	sub	sp, fp, #12	; 0xc
 734:	e89d6800 	ldm	sp, {fp, sp, lr}
 738:	e12fff1e 	bx	lr

0000073c <clearLine>:
/**
 * Apaga todos os caracteres de uma linha
 * */
void clearLine(U8 line) {
 73c:	e1a0c00d 	mov	ip, sp
 740:	e92dd800 	push	{fp, ip, lr, pc}
 744:	e24cb004 	sub	fp, ip, #4	; 0x4
 748:	e24dd008 	sub	sp, sp, #8	; 0x8
 74c:	e1a03000 	mov	r3, r0
 750:	e54b300d 	strb	r3, [fp, #-13]
  posCursor(line, 0);
 754:	e55b300d 	ldrb	r3, [fp, #-13]
 758:	e1a00003 	mov	r0, r3
 75c:	e3a01000 	mov	r1, #0	; 0x0
 760:	eb000012 	bl	7b0 <posCursor>
  register U8 i=0;
 764:	e3a02000 	mov	r2, #0	; 0x0
 768:	e50b2014 	str	r2, [fp, #-20]
 76c:	ea000005 	b	788 <clearLine+0x4c>
  for (; i < 40; i++)
    writeChar(' ');
 770:	e3a00020 	mov	r0, #32	; 0x20
 774:	eb000045 	bl	890 <writeChar>
 * Apaga todos os caracteres de uma linha
 * */
void clearLine(U8 line) {
  posCursor(line, 0);
  register U8 i=0;
  for (; i < 40; i++)
 778:	e51b2014 	ldr	r2, [fp, #-20]
 77c:	e2823001 	add	r3, r2, #1	; 0x1
 780:	e20330ff 	and	r3, r3, #255	; 0xff
 784:	e50b3014 	str	r3, [fp, #-20]
 788:	e51b3014 	ldr	r3, [fp, #-20]
 78c:	e3530027 	cmp	r3, #39	; 0x27
 790:	9afffff6 	bls	770 <clearLine+0x34>
    writeChar(' ');
  posCursor(line, 0);
 794:	e55b300d 	ldrb	r3, [fp, #-13]
 798:	e1a00003 	mov	r0, r3
 79c:	e3a01000 	mov	r1, #0	; 0x0
 7a0:	eb000002 	bl	7b0 <posCursor>
}
 7a4:	e24bd00c 	sub	sp, fp, #12	; 0xc
 7a8:	e89d6800 	ldm	sp, {fp, sp, lr}
 7ac:	e12fff1e 	bx	lr

000007b0 <posCursor>:

/**
 * 
 *  Posiciona o cursor na linha (0..1) e coluna (0..15) indicadas
 */
void posCursor(U8 line, U8 col) { processValue(0,ADDR_COUNTER_MASK | (0x40 * line + col));}
 7b0:	e1a0c00d 	mov	ip, sp
 7b4:	e92dd800 	push	{fp, ip, lr, pc}
 7b8:	e24cb004 	sub	fp, ip, #4	; 0x4
 7bc:	e24dd008 	sub	sp, sp, #8	; 0x8
 7c0:	e1a03000 	mov	r3, r0
 7c4:	e1a02001 	mov	r2, r1
 7c8:	e54b300d 	strb	r3, [fp, #-13]
 7cc:	e1a03002 	mov	r3, r2
 7d0:	e54b300e 	strb	r3, [fp, #-14]
 7d4:	e55b300d 	ldrb	r3, [fp, #-13]
 7d8:	e1a03303 	lsl	r3, r3, #6
 7dc:	e20320ff 	and	r2, r3, #255	; 0xff
 7e0:	e55b300e 	ldrb	r3, [fp, #-14]
 7e4:	e0823003 	add	r3, r2, r3
 7e8:	e20330ff 	and	r3, r3, #255	; 0xff
 7ec:	e1e03c83 	mvn	r3, r3, lsl #25
 7f0:	e1e03ca3 	mvn	r3, r3, lsr #25
 7f4:	e20330ff 	and	r3, r3, #255	; 0xff
 7f8:	e20330ff 	and	r3, r3, #255	; 0xff
 7fc:	e3a00000 	mov	r0, #0	; 0x0
 800:	e1a01003 	mov	r1, r3
 804:	ebffff36 	bl	4e4 <processValue>
 808:	e24bd00c 	sub	sp, fp, #12	; 0xc
 80c:	e89d6800 	ldm	sp, {fp, sp, lr}
 810:	e12fff1e 	bx	lr

00000814 <setCursor>:
 * Cursor/Blink Control Circuit The cursor/blink control circuit
 * generates the cursor or character blinking. The cursor or the
 * blinking will appear with the digit located at the display
 * data RAM (DDRAM) address set in the address counter (AC).
 */
void setCursor(U8 visible, U8 blinking) {
 814:	e1a0c00d 	mov	ip, sp
 818:	e92dd800 	push	{fp, ip, lr, pc}
 81c:	e24cb004 	sub	fp, ip, #4	; 0x4
 820:	e24dd010 	sub	sp, sp, #16	; 0x10
 824:	e1a03000 	mov	r3, r0
 828:	e1a02001 	mov	r2, r1
 82c:	e54b300d 	strb	r3, [fp, #-13]
 830:	e1a03002 	mov	r3, r2
 834:	e54b300e 	strb	r3, [fp, #-14]
  processValue(0,(char) (visible ? CURSOR_ON_MASK | (blinking ? BLINK_ON_MASK : BLINK_OFF_MASK):(CURSOR_OFF_MASK | (blinking ? BLINK_ON_MASK : BLINK_OFF_MASK))));
 838:	e55b300d 	ldrb	r3, [fp, #-13]
 83c:	e3530000 	cmp	r3, #0	; 0x0
 840:	0a00000a 	beq	870 <setCursor+0x5c>
 844:	e55b300e 	ldrb	r3, [fp, #-14]
 848:	e3530000 	cmp	r3, #0	; 0x0
 84c:	0a000002 	beq	85c <setCursor+0x48>
 850:	e3a0300b 	mov	r3, #11	; 0xb
 854:	e50b3014 	str	r3, [fp, #-20]
 858:	ea000001 	b	864 <setCursor+0x50>
 85c:	e3a0300a 	mov	r3, #10	; 0xa
 860:	e50b3014 	str	r3, [fp, #-20]
 864:	e51b3014 	ldr	r3, [fp, #-20]
 868:	e50b3018 	str	r3, [fp, #-24]
 86c:	ea000001 	b	878 <setCursor+0x64>
 870:	e3a0300b 	mov	r3, #11	; 0xb
 874:	e50b3018 	str	r3, [fp, #-24]
 878:	e3a00000 	mov	r0, #0	; 0x0
 87c:	e51b1018 	ldr	r1, [fp, #-24]
 880:	ebffff17 	bl	4e4 <processValue>
}
 884:	e24bd00c 	sub	sp, fp, #12	; 0xc
 888:	e89d6800 	ldm	sp, {fp, sp, lr}
 88c:	e12fff1e 	bx	lr

00000890 <writeChar>:
/**
 * 
 * Escreve o caracter indicado no local do cursor e o cursor
 * avança para a proxima coluna
 */
void writeChar(U8 c) {processValue(1,c);}
 890:	e1a0c00d 	mov	ip, sp
 894:	e92dd800 	push	{fp, ip, lr, pc}
 898:	e24cb004 	sub	fp, ip, #4	; 0x4
 89c:	e24dd008 	sub	sp, sp, #8	; 0x8
 8a0:	e1a03000 	mov	r3, r0
 8a4:	e54b300d 	strb	r3, [fp, #-13]
 8a8:	e55b300d 	ldrb	r3, [fp, #-13]
 8ac:	e3a00001 	mov	r0, #1	; 0x1
 8b0:	e1a01003 	mov	r1, r3
 8b4:	ebffff0a 	bl	4e4 <processValue>
 8b8:	e24bd00c 	sub	sp, fp, #12	; 0xc
 8bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 8c0:	e12fff1e 	bx	lr

000008c4 <writeString>:
/**
 * 
 * Escreve o texto indicado no local do cursor e o cursor avança
 * para a coluna seguinte
 */
void writeString(Pbyte txt) {
 8c4:	e1a0c00d 	mov	ip, sp
 8c8:	e92dd800 	push	{fp, ip, lr, pc}
 8cc:	e24cb004 	sub	fp, ip, #4	; 0x4
 8d0:	e24dd008 	sub	sp, sp, #8	; 0x8
 8d4:	e50b0010 	str	r0, [fp, #-16]
 8d8:	ea000008 	b	900 <writeString+0x3c>
  while(*txt){
      processValue(1,*txt);
 8dc:	e51b3010 	ldr	r3, [fp, #-16]
 8e0:	e5d33000 	ldrb	r3, [r3]
 8e4:	e20330ff 	and	r3, r3, #255	; 0xff
 8e8:	e3a00001 	mov	r0, #1	; 0x1
 8ec:	e1a01003 	mov	r1, r3
 8f0:	ebfffefb 	bl	4e4 <processValue>
      txt++;
 8f4:	e51b3010 	ldr	r3, [fp, #-16]
 8f8:	e2833001 	add	r3, r3, #1	; 0x1
 8fc:	e50b3010 	str	r3, [fp, #-16]
 * 
 * Escreve o texto indicado no local do cursor e o cursor avança
 * para a coluna seguinte
 */
void writeString(Pbyte txt) {
  while(*txt){
 900:	e51b3010 	ldr	r3, [fp, #-16]
 904:	e5d33000 	ldrb	r3, [r3]
 908:	e20330ff 	and	r3, r3, #255	; 0xff
 90c:	e3530000 	cmp	r3, #0	; 0x0
 910:	1afffff1 	bne	8dc <writeString+0x18>
      processValue(1,*txt);
      txt++;
  }
}
 914:	e24bd00c 	sub	sp, fp, #12	; 0xc
 918:	e89d6800 	ldm	sp, {fp, sp, lr}
 91c:	e12fff1e 	bx	lr

00000920 <writeLine>:
/**
 * Escreve o texto indicado na linha indicada (0 ou 1). O resto
 * da linha é texto fica centrado ou alinhado à
 * esquerda,dependendo da última chamada a SetCenter()
 */
void writeLine(U8 line, Pbyte txt) {
 920:	e1a0c00d 	mov	ip, sp
 924:	e92dd800 	push	{fp, ip, lr, pc}
 928:	e24cb004 	sub	fp, ip, #4	; 0x4
 92c:	e24dd010 	sub	sp, sp, #16	; 0x10
 930:	e1a03000 	mov	r3, r0
 934:	e50b101c 	str	r1, [fp, #-28]
 938:	e54b3015 	strb	r3, [fp, #-21]
  int length = Wstrlen(txt);
 93c:	e51b001c 	ldr	r0, [fp, #-28]
 940:	ebfffed0 	bl	488 <Wstrlen>
 944:	e1a03000 	mov	r3, r0
 948:	e50b3010 	str	r3, [fp, #-16]
  if (isCentered){
 94c:	e59f304c 	ldr	r3, [pc, #76]	; 9a0 <writeLine+0x80>
 950:	e5d33000 	ldrb	r3, [r3]
 954:	e3530000 	cmp	r3, #0	; 0x0
 958:	0a000005 	beq	974 <writeLine+0x54>
    length =  (DISPLAY_SIZE_MASK - length) / 2;
 95c:	e51b3010 	ldr	r3, [fp, #-16]
 960:	e2632010 	rsb	r2, r3, #16	; 0x10
 964:	e1a03fa2 	lsr	r3, r2, #31
 968:	e0833002 	add	r3, r3, r2
 96c:	e1a030c3 	asr	r3, r3, #1
 970:	e50b3010 	str	r3, [fp, #-16]
  }
  posCursor(line, (length));
 974:	e51b3010 	ldr	r3, [fp, #-16]
 978:	e20320ff 	and	r2, r3, #255	; 0xff
 97c:	e55b3015 	ldrb	r3, [fp, #-21]
 980:	e1a00003 	mov	r0, r3
 984:	e1a01002 	mov	r1, r2
 988:	ebffff88 	bl	7b0 <posCursor>
  writeString(txt);
 98c:	e51b001c 	ldr	r0, [fp, #-28]
 990:	ebffffcb 	bl	8c4 <writeString>
}
 994:	e24bd00c 	sub	sp, fp, #12	; 0xc
 998:	e89d6800 	ldm	sp, {fp, sp, lr}
 99c:	e12fff1e 	bx	lr
 9a0:	40000001 	.word	0x40000001

000009a4 <setCenter>:

/**
 * Indica se o texto escrito com writeLine() nas chamadas
 * seguintes deve ou não ficar centrado na linha
 */
inline void setCenter(U8 value) {isCentered = value;}
 9a4:	e1a0c00d 	mov	ip, sp
 9a8:	e92dd800 	push	{fp, ip, lr, pc}
 9ac:	e24cb004 	sub	fp, ip, #4	; 0x4
 9b0:	e24dd008 	sub	sp, sp, #8	; 0x8
 9b4:	e1a03000 	mov	r3, r0
 9b8:	e54b300d 	strb	r3, [fp, #-13]
 9bc:	e59f2010 	ldr	r2, [pc, #16]	; 9d4 <setCenter+0x30>
 9c0:	e55b300d 	ldrb	r3, [fp, #-13]
 9c4:	e5c23000 	strb	r3, [r2]
 9c8:	e24bd00c 	sub	sp, fp, #12	; 0xc
 9cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 9d0:	e12fff1e 	bx	lr
 9d4:	40000001 	.word	0x40000001

000009d8 <getPos>:
 * onde vai escrever.
 * x=Total de Caracteres do LCD (16) y=Total de Caracteres da String
 * se centrado pos=(x - y)/2 + (y - b) = (x - y + 2y - 2b)/2 = (x +
 * y -2b)/2 se não centrado pos= y - b
 */
static int getPos(Pbyte txt, U8 b) {
 9d8:	e1a0c00d 	mov	ip, sp
 9dc:	e92dd800 	push	{fp, ip, lr, pc}
 9e0:	e24cb004 	sub	fp, ip, #4	; 0x4
 9e4:	e24dd018 	sub	sp, sp, #24	; 0x18
 9e8:	e50b0018 	str	r0, [fp, #-24]
 9ec:	e1a03001 	mov	r3, r1
 9f0:	e54b3019 	strb	r3, [fp, #-25]
  int length = Wstrlen(txt);
 9f4:	e51b0018 	ldr	r0, [fp, #-24]
 9f8:	ebfffea2 	bl	488 <Wstrlen>
 9fc:	e1a03000 	mov	r3, r0
 a00:	e50b3010 	str	r3, [fp, #-16]
  return (isCentered) ? (DISPLAY_SIZE_MASK + length - 2 * b) / 2 : (length - 3);
 a04:	e59f3054 	ldr	r3, [pc, #84]	; a60 <getPos+0x88>
 a08:	e5d33000 	ldrb	r3, [r3]
 a0c:	e3530000 	cmp	r3, #0	; 0x0
 a10:	0a00000a 	beq	a40 <getPos+0x68>
 a14:	e51b3010 	ldr	r3, [fp, #-16]
 a18:	e2832010 	add	r2, r3, #16	; 0x10
 a1c:	e55b3019 	ldrb	r3, [fp, #-25]
 a20:	e1a03083 	lsl	r3, r3, #1
 a24:	e2633000 	rsb	r3, r3, #0	; 0x0
 a28:	e0822003 	add	r2, r2, r3
 a2c:	e1a03fa2 	lsr	r3, r2, #31
 a30:	e0833002 	add	r3, r3, r2
 a34:	e1a030c3 	asr	r3, r3, #1
 a38:	e50b3020 	str	r3, [fp, #-32]
 a3c:	ea000002 	b	a4c <getPos+0x74>
 a40:	e51b3010 	ldr	r3, [fp, #-16]
 a44:	e2433003 	sub	r3, r3, #3	; 0x3
 a48:	e50b3020 	str	r3, [fp, #-32]
 a4c:	e51b3020 	ldr	r3, [fp, #-32]
}
 a50:	e1a00003 	mov	r0, r3
 a54:	e24bd00c 	sub	sp, fp, #12	; 0xc
 a58:	e89d6800 	ldm	sp, {fp, sp, lr}
 a5c:	e12fff1e 	bx	lr
 a60:	40000001 	.word	0x40000001

00000a64 <main>:
#include "TYPES.h"
#include "startosc.h"

#define  LCD_MASK   ((U32) 0x7F0)

int main(){
 a64:	e1a0c00d 	mov	ip, sp
 a68:	e92dd800 	push	{fp, ip, lr, pc}
 a6c:	e24cb004 	sub	fp, ip, #4	; 0x4
  gpio_init(0,0);
 a70:	e3a00000 	mov	r0, #0	; 0x0
 a74:	e3a01000 	mov	r1, #0	; 0x0
 a78:	ebfffe22 	bl	308 <gpio_init>
  timer_init(pTIMER0,CCLK/MICRO);
 a7c:	e3a0020e 	mov	r0, #-536870912	; 0xe0000000
 a80:	e2800901 	add	r0, r0, #16384	; 0x4000
 a84:	e3a0102c 	mov	r1, #44	; 0x2c
 a88:	ebfffdd3 	bl	1dc <timer_init>
  LCD_init(pTIMER0);
 a8c:	e3a0020e 	mov	r0, #-536870912	; 0xe0000000
 a90:	e2800901 	add	r0, r0, #16384	; 0x4000
 a94:	ebfffeb1 	bl	560 <LCD_init>
  
  writeString("TESTE");
 a98:	e59f3018 	ldr	r3, [pc, #24]	; ab8 <main+0x54>
 a9c:	e1a00003 	mov	r0, r3
 aa0:	ebffff87 	bl	8c4 <writeString>
  
  
  
 return 0;  
 aa4:	e3a03000 	mov	r3, #0	; 0x0
}
 aa8:	e1a00003 	mov	r0, r3
 aac:	e24bd00c 	sub	sp, fp, #12	; 0xc
 ab0:	e89d6800 	ldm	sp, {fp, sp, lr}
 ab4:	e12fff1e 	bx	lr
 ab8:	00000abc 	.word	0x00000abc
 abc:	54534554 	.word	0x54534554
 ac0:	00000045 	.word	0x00000045
